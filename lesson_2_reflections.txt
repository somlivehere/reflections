What happens when you initialize a repository? Why do you need to do it?
it initialises an empty repository. it is requied to store all the files from the 
working directory.


How is the staging area different from the working directory and the repository?
What value do you think it offers?
Staging area acts as a bridge between working directory and repository. It acts as
a second level of protection so that the user has to add the files to the staging 
area and only the can commit the changes. 

How can you use the staging area to make sure you have one commit per logical
change?
stagging area can be used to compare with working directory or repository to 
check for any changes in the file. By using wither git diff and git diff --staged,
we can check for any changes before committing to ensure that the commit is 
logical.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
As the name suggests, branches are part of the master  and are used to create files or 
applications different from the master. It helps in creating and experimenting in 
diffrent stages of main branch. For example, one can take a detour from the master and 
add or delete some of the logics to make the whole application behave in a different 
manner compared to original while keeping the master intact. 
One can also use the master at any time and kepp jumping to branch or master.


How do the diagrams help you visualize the branch structure?
It shows the master and different branches attached to master. It gives a perspective 
to the user to understand the chages made and different files or changes involved
in the process. We can see how the structure is branches out and where to checkout 
to return to the working program. 	

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
Merging helps in combining two different branches which were worked by two different people 
in the group or different ideas on the application. Combining branches adds changes made
in different branches into one. In this way all the ideas are put together to form 
a better application. 
The diagram shown to visualize the branches and master gives a sense of rechability 
of each commit. That is whether any commit can be tracked back to it parent branch or 
not. It gives a clear idea of how each commit was created and how it links with its previous 
version at each commit.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
Pros: Git's automoatic merging may help if there are no conflicts in the both the branches. 
It checks on the changed lines in the code and updates the files accordingly if there are no 
changes made in both the branches. On the other hand, even if there are changes made in both 
of the branches, Git throws an error telling that there is some conflict in the files and
it has to be taken care manually. This helps the user to check into the files before they can 
merge any two branches. 
Cons: Merging the codes of two branches manually is cumbersome. THe user has to go through 
each and eery line to make changes. It is not efficient if the length of the code is too 
large. 
